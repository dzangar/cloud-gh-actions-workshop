name: Node.js CI

on:
  push:
    branches: [ "main" ]  # Trigger on push to 'main' branch

jobs:
  build:
    name: "Build and Test"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: npm
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    - name: Report Coverage
      uses: davelosert/vitest-coverage-report-action@v2
      if: always()

  package-and-publish:
    needs:
      - build

    name: üê≥ Package & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=ref,event=pr
            type=sha,event=branch,prefix=,suffix=,format=short

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/dzangar/cloud-gh-actions-workshop:latest  # Specify the tag here
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs:
      - package-and-publish  # Ensure CD only runs after CI and packaging are done
    runs-on: self-hosted  # This will use your self-hosted runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Pull Docker Image
        run: |
          # Pull the latest image from GitHub Container Registry
          sudo docker pull ghcr.io/dzangar/cloud-gh-actions-workshop:latest
  
      - name: Deploy Docker Container
        run: |
          # Gracefully stop and remove the old container if exists
          sudo docker stop my-container1 || true
          sudo docker rm my-container1 || true
          
          # Run the new container
          sudo docker run -d --name my-container1 -p 81:8080 ghcr.io/dzangar/cloud-gh-actions-workshop:latest
  
          # Clean up unused Docker resources
          sudo docker system prune -f
